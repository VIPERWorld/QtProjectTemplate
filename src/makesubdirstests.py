#!/usr/bin/env python
# -*- coding: utf-8 -*-

#--------------------------- Required modules ---------------------------------

# Built-in modules
import sys
import os
import shutil
import errno
import re

# Curstom module
import buildutils


#--------------------------- Helper methods -----------------------------------

def uncommonprefix(p1, p2):
    # Get per-character common suffix
    i1 = len(p1) - 1
    i2 = len(p2) - 1
    while p1[i1] == p2[i2]:
        i1 -= 1
        i2 -= 1

    # Get path-aware common suffix. Starts with a '/'
    while p1[i1] != '/':
        i1 += 1

    # Returns everything in p1 before p1[i1] ( == '/'), not including the '/'
    return p1[:i1]


#---------------------- Various useful variables ------------------------------

# root directories
srcDir       = sys.argv[1]              # <root-dir>/src
rootDir      = srcDir[:-4]              # <root-dir>
srcLibsDir   = rootDir + '/src/libs'    # <root-dir>/src/libs
testsDir     = rootDir + '/tests'       # <root-dir>/tests
testsLibsDir = rootDir + '/tests/libs'  # <root-dir>/tests/libs

# lib's source directory
srcLibDir    = sys.argv[2]                      # <root-dir>/src/libs/a/b/Lib
srcLibRelDir = srcLibDir[len(srcLibsDir)+1:]    # a/b/Lib
libName      = os.path.basename(srcLibDir)      # Lib
srcLibRelDirSlashed = ""                        # /a/b/Lib
if srcLibRelDir != "":
    srcLibRelDirSlashed = '/' + srcLibRelDir

# lib's tests directory
testsLibDir = testsLibsDir + srcLibRelDirSlashed  # <root-dir>/tests/libs/a/b/Lib

# lib's build target directory
srcLibOutDir = sys.argv[3]                                       # <build-dir>/src/libs/a/b/Lib
buildDir = uncommonprefix(srcLibOutDir, srcLibDir)               # <build-dir>
testsLibOutDir = buildDir + '/tests/libs' + srcLibRelDirSlashed  # <build-dir>/tests/libs/a/b/Lib

# QMake Config
qmakeConfig = sys.argv[4:]

# Prefixes
testPrefix    = 'Test_'                               # Test_
libPrefix     = srcLibRelDir.replace('/','_') + '_'   # a_b_Lib_
testLibPrefix = testPrefix + libPrefix                # Test_a_b_Lib_


#----------------------------- Actual script ----------------------------------

# Get file content of <root-dir>/src/libs/a/b/Lib/Lib.pro
libProFileName = libName + '.pro'
srcLibProFilePath = os.path.join(srcLibDir, libProFileName)
srcLibProFileContent = buildutils.readFromFile(srcLibProFilePath)

# Read subdirs
subdirs = buildutils.getSubdirs(srcLibProFileContent)

# Generate content for <root-dir>/tests/libs/a/b/Lib/Lib.pro
testsLibProFileContent  = "# This file is automatically generated. Any edit will be lost.\n"
testsLibProFileContent += "# It is kept in source control for readability on GitHub.\n\n"
testsLibProFileContent += "TEMPLATE = subdirs\n"
testsLibProFileContent += "SUBDIRS ="
testsLibProFileContent += " \\\n    $$OUT_PWD/.runtests"
for subdir in sorted(subdirs):
    testsLibProFileContent += " \\\n    " + subdir
testsLibProFileContent += "\n"

# Write content to <root-dir>/tests/libs/a/b/Lib/Lib.pro
testsLibProFilePath = os.path.join(testsLibDir, libProFileName)
buildutils.writeToFileIfDifferent(testsLibProFilePath, testsLibProFileContent)

# Create $$OUT_PWD/.runtests project with all the files it contains
runtestsDir = os.path.join(testsLibOutDir, '.runtests')
buildutils.writeToFile(os.path.join(runtestsDir, '.runtests.pro'), buildutils.runtests_pro)
buildutils.writeToFile(os.path.join(runtestsDir, 'runtests.cpp'), buildutils.runtests_cpp)
buildutils.writeToFile(os.path.join(runtestsDir, 'runtests.py'), buildutils.runtests_py)


